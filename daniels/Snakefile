import os
import skimage
import skimage.io
import numpy as np
import argparse
from matplotlib import pyplot as plt

row = list(f'{r:02}' for r in range(1,73))
col = list(f'{c:02}' for c in range(1,73))

lib_path = config['lib_path']

def merge_red_cyan_channels(red_path, cyan_path, output_path):
        red = skimage.io.imread(red_path)
        red_adj = skimage.exposure.rescale_intensity(red, out_range=(0,255)).astype('uint8')

        cyan = skimage.io.imread(cyan_path)
        cyan_adj = skimage.exposure.rescale_intensity(cyan, out_range=(0,255)).astype('uint8')

        zero_array = np.zeros(cyan_adj.shape).astype('uint8')

        reshaped = np.dstack((red_adj, cyan_adj, zero_array))

        skimage.io.imsave(output_path, reshaped)

rule all:
    input:
        expand(os.path.join(lib_path, 'Merged', 'C{col}', 'R{row}_C{col}_Merged.png'), col=col, row=row)

if os.path.exists(os.path.join(lib_path, 'Green')):
    rule merge_images:
        input:
            red=os.path.join(lib_path, 'Green', 'S0000', 'C{col}', 'R{row}_C{col}_0000_02_Green.tif'),
            cyan=os.path.join(lib_path, 'Cyan', 'S0000', 'C{col}', 'R{row}_C{col}_0000_00_Cyan.tif')
        output:
            os.path.join(lib_path, 'Merged', 'C{col}', 'R{row}_C{col}_Merged.png')
        run:
            os.makedirs(os.path.dirname(output), exist_ok=True)
            merge_red_cyan_channels(input.red, input.cyan, output)


else:
    rule merge_images:
        input:
            red=os.path.join(lib_path, 'Red', 'S0000', 'C{col}', 'R{row}_C{col}_0000_01_Red.tif'),
            cyan=os.path.join(lib_path, 'Cyan', 'S0000', 'C{col}', 'R{row}_C{col}_0000_00_Cyan.tif')
        output:
            os.path.join(lib_path, 'Merged', 'C{col}', 'R{row}_C{col}_Merged.png')
        run:
            os.makedirs(os.path.dirname(output), exist_ok=True)
            merge_red_cyan_channels(input.red, input.cyan, output)
